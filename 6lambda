#include <iostream>
#include <functional>
#include <string>
#include <map>


//4. 3 28  +1 *3  14 или 20

using namespace std;

const int n_begin=3, n_end=28, n1=20, n2=14;

int main()
{
    int n_counted=0;
    function<int (int, int,string)> f_forward = [&f_forward,&n_counted](int x, int end, string way)
    {
        n_counted++;
        if(x<end)return f_forward(x+1,end,way+"+1 ")+f_forward(x*3,end,way+"*3 ");
        else
        if(x==end)
        {
            cout<<way<<"\n";
            return 1;
        }
        return 0;
    };
    cout<<"Forward ways:\n"<<"Ways: "<<"\n"<<f_forward(n_begin,n_end,"")<<"-total ways\n"<<"Branch counted:"<<n_counted<<"\n";
    n_counted=0;
    cout<<endl;
    //-------------------------------------------
    function<int (int, int,string)> f_back = [&f_back,&n_counted](int x, int end, string way)
    {
        n_counted++;
        if(x>end)
        {
            int t =f_back(x-1,end,way+"-1 ");
            if (x%3==0) t+=f_back(x/3,end,way+"/3 ");
            return t;
        }
        else
        if(x==end)
        {
            cout<<way<<"\n";
            return 1;
        }
        return 0;
    };
    cout<<"Back ways:\n"<<"Ways: "<<"\n"<<f_back(n_end,n_begin,"")<<"-total ways\n"<<"Branch counted:"<<n_counted<<"\n";
    n_counted=0;
    cout<<endl;
    //-------------------------------------------
    function<int (int, int, int,string)> f_forward_r = [&f_forward_r,&n_counted](int x, int end, int r, string way)
    {
        n_counted++;
        if(x<end)
        {
            int t=0;
            if (x>=r || x+1<=r) t+=f_forward_r(x+1,end,r,way+"+1 ");
            if (x>=r || x*3<=r) t+=f_forward_r(x*3,end,r,way+"*3 ");
            return t;
        }
        else
        if(x==end)
        {
            cout<<way<<"\n";
            return 1;
        }
        return 0;
    };
    cout<<"Forward_r ways:\n"<<"Ways: "<<"\n"<<f_forward_r(n_begin,n_end,n1,"")+f_forward_r(n_begin,n_end,n2,"")<<"-total ways\n"<<"Branch counted:"<<n_counted<<"\n";
    n_counted=0;
    cout<<endl;
    //-------------------------------------------
    function<int (int, int, int, int,string)> f_forward_r2 = [&f_forward_r2,&n_counted](int x, int end, int r1, int r2, string way)
    {
        n_counted++;
        if(x<end)
        {
            int t=0;
            if ((x>=r1 && x>=r2) || (x+1<=r1 && x+1<=r2) || (x>=r1 && x+1<=r2) || (x+1<=r1 && x>=r2)) t+=f_forward_r2(x+1,end,r1,r2,way+"+1 ");
            if ((x>=r1 && x>=r2) || (x*3<=r1 && x*3<=r2) || (x>=r1 && x*3<=r2) || (x*3<=r1 && x>=r2)) t+=f_forward_r2(x*3,end,r1,r2,way+"*3 ");
            return t;
        }
        else
        if(x==end)
        {
            cout<<way<<"\n";
            return 1;
        }
        return 0;
    };
    cout<<"Forward_r2 ways:\n"<<"Ways: "<<"\n"<<f_forward_r2(n_begin,n_end,n1,n2,"")<<"-total ways\n"<<"Branch counted:"<<n_counted<<"\n";
    n_counted=0;
    cout<<endl;
    //-------------------------------------------
    map<int,int> Space;
    function<int (int, int)> f_space = [&Space, &f_space, &n_counted](int x, int end)
    {
        n_counted++;
        if(Space.count(x)) return Space[x];
        if(x==end)
        {
            Space[x]=1;
            return 1;
        }
        if(x<end)
        {
            Space[x]= f_space(x+1,end)+f_space(x*3,end);
            return Space[x];
        }
        return 0;
    };
    cout<<"Space ways:\n"<<"Total ways: "<<"\n"<<f_space(n_begin, n_end)<<"\n"<<"Branch counted:"<<n_counted<<"\n";
    n_counted=0;
    for(auto i: Space)
        cout<<i.first<<" "<<i.second<<endl;

    return 0;
}
